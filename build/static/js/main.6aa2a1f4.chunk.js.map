{"version":3,"sources":["utils/api.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","responseType","School","props","react_default","a","createElement","className","school","Name","Description","IsOpen","Teachers","map","teacher","key","Id","Students","student","IsEnrolled","App","state","schools","currentSchool","_this2","this","API","get","then","res","data","Schools","setState","console","log","_this3","onClick","selectSchool","App_School","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gSAEeA,WAAMC,OAAO,CAC1BC,QAAS,WACTC,aAAc,SCEVC,eAAS,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeJ,EAAMK,OAAOC,MAC1CL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eACVJ,EAAMK,OAAOE,YACdN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBACbJ,EAAMK,OAAOC,KADhB,gBACmC,IACjCL,EAAAC,EAAAC,cAAA,SAAIH,EAAMK,OAAOG,OAAS,OAAS,UAFrC,qBAKFP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACZJ,EAAMK,OAAOI,SAASC,IAAI,SAAAC,GAAO,OAChCV,EAAAC,EAAAC,cAAA,OAAKS,IAAKD,EAAQE,IAChBZ,EAAAC,EAAAC,cAAA,UAAKQ,EAAQL,MACbL,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UACGQ,EAAQG,SAASJ,IAAI,SAAAK,GAAO,OAC3Bd,EAAAC,EAAAC,cAAA,MAAIS,IAAKG,EAAQF,IACdE,EAAQT,KADX,KAEEL,EAAAC,EAAAC,cAAA,SAAIY,EAAQC,WAAa,WAAa,gBAFxC,eAmDDC,6MArCbC,MAAQ,CACNC,QAAS,GACTC,cAAe,yFAEG,IAAAC,EAAAC,KAClBC,EAAIC,MAAMC,KAAK,SAAAC,GACb,IAAMP,EAAUO,EAAIC,KAAKC,QACzBP,EAAKQ,SAAS,CAAEV,UAASC,cAAeD,EAAQ,KAChDW,QAAQC,IAAIZ,0CAGHd,GACXiB,KAAKO,SAAS,CAAET,cAAef,qCAExB,IAAA2B,EAAAV,KACP,OAAKA,KAAKJ,MAAME,cAEdnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZkB,KAAKJ,MAAMC,QAAQT,IAAI,SAAAL,GAAM,OAC5BJ,EAAAC,EAAAC,cAAA,QACEC,UAAU,WACVQ,IAAKP,EAAOQ,GACZoB,QAAS,kBAAMD,EAAKE,aAAa7B,KAEhCA,EAAOC,SAIdL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACgC,EAAD,CAAQ9B,OAAQiB,KAAKJ,MAAME,kBAfK,YAhBxBgB,IAAMC,WC1BJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.6aa2a1f4.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"api.json\",\n  responseType: \"json\"\n});\n","import React from \"react\";\nimport API from \"./utils/api\";\n\nimport \"./normalize.css\";\nimport \"./App.css\";\n\nconst School = props => {\n  return (\n    <div className=\"school\">\n      <h1 className=\"school-name\">{props.school.Name}</h1>\n      <p className=\"school-desc\">\n        {props.school.Description}\n        <br />\n        <span className=\"school-enrollment\">\n          {props.school.Name} is currently{\" \"}\n          <b>{props.school.IsOpen ? \"open\" : \"closed\"}</b> for enrollment.\n        </span>\n      </p>\n      <div className=\"school-teachers\">\n        {props.school.Teachers.map(teacher => (\n          <div key={teacher.Id}>\n            <h2>{teacher.Name}</h2>\n            <h3>Students</h3>\n            <ol>\n              {teacher.Students.map(student => (\n                <li key={student.Id}>\n                  {student.Name} (\n                  <b>{student.IsEnrolled ? \"enrolled\" : \"not enrolled\"}</b>)\n                </li>\n              ))}\n            </ol>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nclass App extends React.Component {\n  state = {\n    schools: [],\n    currentSchool: null\n  };\n  componentDidMount() {\n    API.get().then(res => {\n      const schools = res.data.Schools;\n      this.setState({ schools, currentSchool: schools[0] });\n      console.log(schools);\n    });\n  }\n  selectSchool(school) {\n    this.setState({ currentSchool: school });\n  }\n  render() {\n    if (!this.state.currentSchool) return null;\n    return (\n      <div className=\"app\">\n        <nav className=\"nav\">\n          {this.state.schools.map(school => (\n            <span\n              className=\"nav-item\"\n              key={school.Id}\n              onClick={() => this.selectSchool(school)}\n            >\n              {school.Name}\n            </span>\n          ))}\n        </nav>\n        <div className=\"container\">\n          <School school={this.state.currentSchool} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}